#include <stdio.h>
#include <stdint.h>

// Initial permutation table
const int initial_permutation[] = { 58, 50, 42, 34, 26, 18, 10, 2,
                                    60, 52, 44, 36, 28, 20, 12, 4,
                                    62, 54, 46, 38, 30, 22, 14, 6,
                                    64, 56, 48, 40, 32, 24, 16, 8,
                                    57, 49, 41, 33, 25, 17, 9, 1,
                                    59, 51, 43, 35, 27, 19, 11, 3,
                                    61, 53, 45, 37, 29, 21, 13, 5,
                                    63, 55, 47, 39, 31, 23, 15, 7 };

// Final permutation table
const int final_permutation[] = { 40, 8, 48, 16, 56, 24, 64, 32,
                                  39, 7, 47, 15, 55, 23, 63, 31,
                                  38, 6, 46, 14, 54, 22, 62, 30,
                                  37, 5, 45, 13, 53, 21, 61, 29,
                                  36, 4, 44, 12, 52, 20, 60, 28,
                                  35, 3, 43, 11, 51, 19, 59, 27,
                                  34, 2, 42, 10, 50, 18, 58, 26,
                                  33, 1, 41, 9, 49, 17, 57, 25 };

// Expansion permutation table
const int expansion_permutation[] = { 32, 1, 2, 3, 4, 5,
                                      4, 5, 6, 7, 8, 9,
                                      8, 9, 10, 11, 12, 13,
                                      12, 13, 14, 15, 16, 17,
                                      16, 17, 18, 19, 20, 21,
                                      20, 21, 22, 23, 24, 25,
                                      24, 25, 26, 27, 28, 29,
                                      28, 29, 30, 31, 32, 1 };

// Permutation function P
const int permutation_p[] = { 16, 7, 20, 21, 29, 12, 28, 17,
                              1, 15, 23, 26, 5, 18, 31, 10,
                              2, 8, 24, 14, 32, 27, 3, 9,
                              19, 13, 30, 6, 22, 11, 4, 25 };

// S-boxes (Substitution boxes)
const int sbox[8][4][16] = {
    // S1
    {
        { 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7 },
        { 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8 },
        { 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0 },
        { 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 }
    },
    // S2
    {
        { 15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10 },
        { 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5 },
        { 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15 },
        { 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 }
    },
    // S3
    {
        { 10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8 },
        { 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1 },
        { 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7 },
        { 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 }
    },
    // S4
    {
        { 7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15 },
        { 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9 },
        { 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4 },
        { 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14 }
    },
    // S5
    {
        { 2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9 },
        { 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6 },
        { 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14 },
        { 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 }
    },
    // S6
    {
        { 12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11 },
        { 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8 },
        { 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6 },
        { 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13 }
    },
    // S7
    {
        { 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1 },
        { 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6 },
        { 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2 },
        { 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12 }
    },
    // S8
    {
        { 13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7 },
        { 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2 },
        { 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8 },
        { 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11 }
    }
};

// Permutation choice 1 (PC1) table
const int permutation_choice1[] = { 57, 49, 41, 33, 25, 17, 9,
                                    1, 58, 50, 42, 34, 26, 18,
                                    10, 2, 59, 51, 43, 35, 27,
                                    19, 11, 3, 60, 52, 44, 36 };

// Permutation choice 2 (PC2) table
const int permutation_choice2[] = { 14, 17, 11, 24, 1, 5,
                                    3, 28, 15, 6, 21, 10,
                                    23, 19, 12, 4, 26, 8 };

// Shift schedule for key generation (for decryption, shifts are in reverse)
const int shift_schedule[] = { 1, 1, 2, 2, 2, 2, 2, 2,
                               1, 2, 2, 2, 2, 2, 2, 1 };

// Initial permutation (IP) function
void initial_permutation(uint64_t *input) {
    uint64_t permuted = 0;
    int i;

    for (i = 0; i < 64; i++) {
        permuted |= ((*input >> (64 - initial_permutation[i])) & 1) << (63 - i);
    }

    *input = permuted;
}

// Final permutation (FP) function
void final_permutation(uint64_t *input) {
    uint64_t permuted = 0;
    int i;

    for (i = 0; i < 64; i++) {
        permuted |= ((*input >> (64 - final_permutation[i])) & 1) << (63 - i);
    }

    *input = permuted;
}

// Expansion permutation (E) function
void expansion_permutation(uint32_t *right_half, uint64_t *expanded) {
    *expanded = 0;
    int i;

    for (i = 0; i < 48; i++) {
        *expanded |= ((*right_half >> (32 - expansion_permutation[i])) & 1) << (47 - i);
    }
}

// Permutation P function
void permutation_p(uint32_t *input) {
    uint32_t permuted = 0;
    int i;

    for (i = 0; i < 32; i++) {
        permuted |= ((*input >> (32 - permutation_p[i])) & 1) << (31 - i);
    }

    *input = permuted;
}

// Permutation choice 1 (PC1) function
void permutation_choice1(uint64_t *key) {
    uint64_t permuted = 0;
    int i;

    for (i = 0; i < 56; i++) {
        permuted |= ((*key >> (64 - permutation_choice1[i])) & 1) << (55 - i);
    }

    *key = permuted;
}

// Permutation choice 2 (PC2) function
void permutation_choice2(uint64_t *key) {
    uint64_t permuted = 0;
    int i;

    for (i = 0; i < 48; i++) {
        permuted |= ((*key >> (56 - permutation_choice2[i])) & 1) << (47 - i);
    }

    *key = permuted;
}

// S-box substitution function
void sbox_substitution(uint64_t *right_half) {
    int i, j;
    uint32_t block, row, col;

    for (i = 0; i < 8; i++) {
        // Extract 6-bit block from the 48-bit right half
        block = (*right_half >> (42 - i * 6)) & 0x3F;

        // Determine row (first and last bits)
        row = ((block & 0x20) >> 4) | (block & 1);

        // Determine column (middle 4 bits)
        col = (block >> 1) & 0xF;

        // Substitute using S-box
        *right_half &= ~(0x3F << (42 - i * 6)); // Clear the 6 bits
        *right_half |= (uint64_t)sbox[i][row][col] << (42 - i * 6); // Set new 4 bits
    }
}

// Function to perform DES round
void des_round(uint64_t *left_half, uint64_t *right_half, uint64_t key) {
    uint64_t expanded = 0;

    // Expansion permutation (E)
    expansion_permutation((uint32_t *)right_half, &expanded);

    // XOR with round key
    expanded ^= key;

    // S-box substitution
    sbox_substitution(&expanded);

    // Permutation P
    permutation_p((uint32_t *)&expanded);

    // XOR with left half
    expanded ^= *left_half;

    // Swap left and right halves
    *left_half = *right_half;
    *right_half = expanded;
}

// Function to generate round keys with modified subset approach
void generate_round_keys(uint64_t *keys, uint64_t key) {
    uint64_t permuted_key;
    uint32_t left_half, right_half;
    int i;

    // Initial permutation choice 1 (PC1)
    permutation_choice1(&key);
    permuted_key = key;

    // Split into left and right halves
    left_half = permuted_key >> 28;
    right_half = permuted_key & 0xFFFFFFF;

    // Generate round keys
    for (i = 0; i < 16; i++) {
        // Perform left shifts
        left_half = ((left_half << shift_schedule[i]) | (left_half >> (28 - shift_schedule[i]))) & 0xFFFFFFF;
        right_half = ((right_half << shift_schedule[i]) | (right_half >> (28 - shift_schedule[i]))) & 0xFFFFFFF;

        // Combine left and right halves
        uint64_t combined_half = ((uint64_t)left_half << 28) | right_half;

        // Select specific bits for subkey generation
        uint64_t subkey1 = combined_half & 0xFFFFFFF; // First 28 bits
        uint64_t subkey2 = (combined_half >> 28) & 0xFFFFFFF; // Next 28 bits

        // Combine and permute to generate round key
        uint64_t round_key = (subkey1 << 28) | subkey2;

        // Permutation choice 2 (PC2)
        permutation_choice2(&round_key);

        // Store the round key
        keys[i] = round_key;
    }
}

// Function to encrypt using DES algorithm
void des_encrypt(uint64_t *block, uint64_t *keys) {
    uint64_t left_half, right_half;
    int i;

    // Initial permutation (IP)
    initial_permutation(block);

    // Split into left and right halves
    left_half = *block >> 32;
    right_half = *block & 0xFFFFFFFF;

    // Perform 16 rounds of DES
    for (i = 0; i
