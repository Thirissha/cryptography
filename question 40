#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26
#define TOP_N_RESULTS 10

// Expected letter frequencies in English (approximate)
const double englishFreqs[ALPHABET_SIZE] = {
    0.082, 0.015, 0.028, 0.043, 0.127, 0.022, 0.020, 0.061, 0.070, 0.001,
    0.005, 0.040, 0.024, 0.067, 0.075, 0.019, 0.001, 0.060, 0.063, 0.091,
    0.028, 0.010, 0.024, 0.001, 0.020, 0.001
};

// Function to calculate letter frequencies in a text
void calculateFrequencies(const char *text, double *freqs) {
    int count[ALPHABET_SIZE] = {0};
    int totalLetters = 0;

    for (size_t i = 0; i < strlen(text); i++) {
        if (isalpha(text[i])) {
            char letter = toupper(text[i]);
            count[letter - 'A']++;
            totalLetters++;
        }
    }

    for (int i = 0; i < ALPHABET_SIZE; i++) {
        freqs[i] = (double)count[i] / totalLetters;
    }
}

// Function to print letter frequencies
void printFrequencies(const double *freqs) {
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        printf("%c: %.2f%%\n", 'A' + i, freqs[i] * 100);
    }
}

// Function to compare frequencies and score a plaintext
double scorePlaintext(const double *freqs) {
    double score = 0.0;
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        score += (1 - fabs(freqs[i] - englishFreqs[i])) * 100; // Score based on frequency match
    }
    return score;
}

// Function to decrypt ciphertext with a given substitution key
void decrypt(const char *ciphertext, const char *key, char *plaintext) {
    for (size_t i = 0; i < strlen(ciphertext); i++) {
        if (isalpha(ciphertext[i])) {
            char letter = toupper(ciphertext[i]);
            plaintext[i] = key[letter - 'A'];
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

int main() {
    const char *ciphertext = "YOUR_CIPHERTEXT_HERE"; // Replace with actual ciphertext
    size_t textLength = strlen(ciphertext);

    double freqs[ALPHABET_SIZE];
    calculateFrequencies(ciphertext, freqs);

    printf("Letter frequencies:\n");
    printFrequencies(freqs);

    char plaintext[textLength + 1];
    double scores[TOP_N_RESULTS] = {0};
    char *topResults[TOP_N_RESULTS] = {NULL};
    char substitutionKey[ALPHABET_SIZE + 1];

    for (int i = 0; i < ALPHABET_SIZE; i++) {
        substitutionKey[i] = 'A' + i;
    }
    substitutionKey[ALPHABET_SIZE] = '\0';

    for (int i = 0; i < ALPHABET_SIZE; i++) {
        for (int j = i + 1; j < ALPHABET_SIZE; j++) {
            char temp = substitutionKey[i];
            substitutionKey[i] = substitutionKey[j];
            substitutionKey[j] = temp;

            for (int k = 0; k < ALPHABET_SIZE; k++) {
                char key[ALPHABET_SIZE];
                for (int l = 0; l < ALPHABET_SIZE; l++) {
                    key[l] = substitutionKey[(l + k) % ALPHABET_SIZE];
                }

                decrypt(ciphertext, key, plaintext);

                double currentFreqs[ALPHABET_SIZE];
                calculateFrequencies(plaintext, currentFreqs);

                double score = scorePlaintext(currentFreqs);

                for (int m = 0; m < TOP_N_RESULTS; m++) {
                    if (score > scores[m]) {
                        for (int n = TOP_N_RESULTS - 1; n > m; n--) {
                            scores[n] = scores[n - 1];
                            topResults[n] = topResults[n - 1];
                        }
                        scores[m] = score;
                        topResults[m] = strdup(plaintext);
                        break;
                    }
                }
            }

            temp = substitutionKey[i];
            substitutionKey[i] = substitutionKey[j];
            substitutionKey[j] = temp;
        }
    }

    printf("\nTop %d possible plaintexts:\n", TOP_N_RESULTS);
    for (int i = 0; i < TOP_N_RESULTS; i++) {
        if (topResults[i] != NULL) {
            printf("Plaintext: %s (Score: %.2f)\n", topResults[i], scores[i]);
            free(topResults[i]);
        }
    }

    return 0;
}
