#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Function to find gcd of two numbers
int gcd(int a, int b) {
    if (b == 0) {
        return a;
    }
    return gcd(b, a % b);
}

// Extended Euclidean Algorithm to find the multiplicative inverse
int extendedEuclidean(int a, int b, int *x, int *y) {
    if (a == 0) {
        *x = 0;
        *y = 1;
        return b;
    }
    int x1, y1;
    int gcd = extendedEuclidean(b % a, a, &x1, &y1);
    *x = y1 - (b / a) * x1;
    *y = x1;
    return gcd;
}

// Function to find the multiplicative inverse of e modulo phi
int modInverse(int e, int phi) {
    int x, y;
    int g = extendedEuclidean(e, phi, &x, &y);
    if (g != 1) {
        printf("Multiplicative inverse does not exist\n");
        exit(1);
    } else {
        return (x % phi + phi) % phi;
    }
}

// Function to perform modular exponentiation
int modExp(int base, int exp, int mod) {
    int result = 1;
    base = base % mod;
    while (exp > 0) {
        if (exp % 2 == 1) {
            result = (result * base) % mod;
        }
        exp = exp >> 1;
        base = (base * base) % mod;
    }
    return result;
}

// Function to generate a random prime number
int generatePrime() {
    int primes[] = {53, 59, 61, 67, 71, 73, 79, 83, 89, 97}; // Sample primes
    int index = rand() % 10;
    return primes[index];
}

int main() {
    srand(time(NULL));

    // Step 1: Generate two distinct prime numbers p and q
    int p = generatePrime();
    int q;
    do {
        q = generatePrime();
    } while (q == p);

    // Step 2: Compute n = pq
    int n = p * q;
    printf("p = %d, q = %d, n = %d\n", p, q, n);

    // Step 3: Compute phi(n) = (p-1)(q-1)
    int phi = (p - 1) * (q - 1);
    printf("phi(n) = %d\n", phi);

    // Step 4: Choose e such that 1 < e < phi(n) and gcd(e, phi(n)) = 1
    int e;
    do {
        e = rand() % (phi - 2) + 2; // e in range [2, phi-1]
    } while (gcd(e, phi) != 1);
    printf("Public key e = %d\n", e);

    // Step 5: Compute d, the modular multiplicative inverse of e modulo phi
    int d = modInverse(e, phi);
    printf("Private key d = %d\n", d);

    // Example plaintext message (integer)
    int plaintext = 42;
    printf("Plaintext: %d\n", plaintext);

    // Encrypt the plaintext
    int ciphertext = modExp(plaintext, e, n);
    printf("Ciphertext: %d\n", ciphertext);

    // Decrypt the ciphertext
    int decrypted = modExp(ciphertext, d, n);
    printf("Decrypted text: %d\n", decrypted);

    // Demonstrate why simply changing e and d while keeping n is not safe
    if (d == 0) {
        printf("Failed to find modular multiplicative inverse\n");
        return 1;
    }

    // Suppose Bob leaks his private key d
    printf("Leaked private key d = %d\n", d);

    // New public key e2 and private key d2 (using the same modulus n)
    int e2;
    do {
        e2 = rand() % (phi - 2) + 2; // e2 in range [2, phi-1]
    } while (gcd(e2, phi) != 1 || e2 == e);
    int d2 = modInverse(e2, phi);
    printf("New public key e2 = %d, new private key d2 = %d\n", e2, d2);

    // Encrypt the plaintext with the new public key
    int ciphertext2 = modExp(plaintext, e2, n);
    printf("Ciphertext with new key: %d\n", ciphertext2);

    // Decrypt the ciphertext with the new private key
    int decrypted2 = modExp(ciphertext2, d2, n);
    printf("Decrypted text with new key: %d\n", decrypted2);

    return 0;
}
