#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <math.h>

#define MAX_LEN 100

// Function to calculate greatest common divisor (GCD)
int gcd(int a, int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

// Function to find modular inverse of a (mod m) using extended Euclidean algorithm
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++)
        if ((a * x) % m == 1)
            return x;
    return 1;
}

// Function to encrypt plaintext using Hill cipher
void encrypt(char *plaintext, int keyMatrix[][3], int keySize) {
    int len = strlen(plaintext);
    int i, j, k, sum;

    // Adjust plaintext length to be a multiple of keySize
    while (len % keySize != 0) {
        plaintext[len] = 'x';
        len++;
    }
    plaintext[len] = '\0';

    // Convert plaintext to uppercase
    for (i = 0; i < len; i++)
        plaintext[i] = toupper(plaintext[i]);

    // Encrypt using the key matrix
    for (i = 0; i < len; i += keySize) {
        for (j = 0; j < keySize; j++) {
            sum = 0;
            for (k = 0; k < keySize; k++) {
                sum += keyMatrix[j][k] * (plaintext[i + k] - 'A');
            }
            plaintext[i + j] = (sum % 26) + 'A';
        }
    }
}

// Function to decrypt ciphertext using Hill cipher
void decrypt(char *ciphertext, int keyMatrix[][3], int keySize) {
    int len = strlen(ciphertext);
    int i, j, k, sum;

    // Decrypt using the key matrix
    for (i = 0; i < len; i += keySize) {
        for (j = 0; j < keySize; j++) {
            sum = 0;
            for (k = 0; k < keySize; k++) {
                sum += keyMatrix[j][k] * (ciphertext[i + k] - 'A');
            }
            ciphertext[i + j] = (sum % 26) + 'A';
        }
    }

    // Adjust plaintext length back to original
    len = strlen(ciphertext);
    while (len > 0 && ciphertext[len - 1] == 'x')
        len--;
    ciphertext[len] = '\0';
}

int main() {
    char plaintext[MAX_LEN];
    char ciphertext[MAX_LEN];
    int keyMatrix[3][3] = { {6, 24, 1}, {13, 16, 10}, {20, 17, 15} }; // Example key matrix
    int keySize = 3;

    printf("Enter plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0'; // Remove newline character

    encrypt(plaintext, keyMatrix, keySize);
    printf("Encrypted ciphertext: %s\n", plaintext);

    decrypt(plaintext, keyMatrix, keySize);
    printf("Decrypted plaintext: %s\n", plaintext);

    return 0;
}
