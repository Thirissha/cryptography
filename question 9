#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MATRIX_SIZE 5

// Function to prepare the Playfair cipher matrix
void preparePlayfairMatrix(char key[], char matrix[MATRIX_SIZE][MATRIX_SIZE]) {
    int i, j, k;
    int len = strlen(key);
    char temp[MATRIX_SIZE * MATRIX_SIZE];
    int tempIndex = 0;
    int used[26] = {0};

    // Fill the key in the matrix
    for (i = 0; i < len; i++) {
        if (key[i] == 'J') key[i] = 'I'; // replace 'J' with 'I'
        if (!used[key[i] - 'A']) {
            temp[tempIndex++] = key[i];
            used[key[i] - 'A'] = 1;
        }
    }

    // Fill the remaining alphabet
    for (i = 0; i < 26; i++) {
        if (i != ('J' - 'A') && !used[i]) {
            temp[tempIndex++] = 'A' + i;
        }
    }

    // Fill the matrix
    k = 0;
    for (i = 0; i < MATRIX_SIZE; i++) {
        for (j = 0; j < MATRIX_SIZE; j++) {
            matrix[i][j] = temp[k++];
        }
    }
}

// Function to find position of a character in matrix
void findPosition(char matrix[MATRIX_SIZE][MATRIX_SIZE], char ch, int *row, int *col) {
    int i, j;
    for (i = 0; i < MATRIX_SIZE; i++) {
        for (j = 0; j < MATRIX_SIZE; j++) {
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

// Function to decrypt the message using Playfair cipher
void decryptMessage(char message[], char key[]) {
    char matrix[MATRIX_SIZE][MATRIX_SIZE];
    preparePlayfairMatrix(key, matrix);

    int len = strlen(message);
    int i;
    char decrypted[len];

    for (i = 0; i < len; i += 2) {
        char a = toupper(message[i]);
        char b = toupper(message[i+1]);

        int row1, col1, row2, col2;
        findPosition(matrix, a, &row1, &col1);
        findPosition(matrix, b, &row2, &col2);

        if (row1 == row2) {
            decrypted[i] = matrix[row1][(col1 + 4) % MATRIX_SIZE];
            decrypted[i+1] = matrix[row2][(col2 + 4) % MATRIX_SIZE];
        } else if (col1 == col2) {
            decrypted[i] = matrix[(row1 + 4) % MATRIX_SIZE][col1];
            decrypted[i+1] = matrix[(row2 + 4) % MATRIX_SIZE][col2];
        } else {
            decrypted[i] = matrix[row1][col2];
            decrypted[i+1] = matrix[row2][col1];
        }
    }

    decrypted[len] = '\0';

    printf("Decrypted message: %s\n", decrypted);
}

int main() {
    char message[] = "KXJEY UREBE ZWEHE WRYTU HEYFS KREHE GOYFI WTTTU OLKSY CAJPO BOTEI ZONTX BYBNT GONEY CUZWR GDSON SXBOU YWRHE BAAHY USEDQ";
    char keyword[] = "KENNEDY";

    decryptMessage(message, keyword);

    return 0;
}
